<?php
/**
 * @copyright Bluz PHP Team
 * @link      https://github.com/bluzphp/framework
 */

/**
 * @namespace
 */

namespace Bluz\Tests\Db;

use Bluz\Db\Table;
use Bluz\Tests\Fixtures\Db;
use Bluz\Tests\Fixtures\Models\Test\Table as TestTable;
use Bluz\Tests\FrameworkTestCase;

/**
 * Test class for Table.
 * Generated by PHPUnit on 2011-07-27 at 13:52:47.
 */
class TableTest extends FrameworkTestCase
{
    /**
     * @var Table
     */
    protected $table;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->table = Db\ConcreteTable::getInstance();
    }

    /**
     * testGetInstance
     *
     * @covers \Bluz\Db\Table::getInstance
     */
    public function testGetInstance()
    {
        // test that the method doesn't create new objects
        self::assertSame($this->table, Db\ConcreteTable::getInstance());

        // tests that instances are creating separately for each table class
        self::assertEquals(
            Db\ConcreteTable::class,
            get_class(Db\ConcreteTable::getInstance())
        );
        self::assertEquals(
            Db\WrongKeysTable::class,
            get_class(Db\WrongKeysTable::getInstance())
        );
    }

    /**
     * @expectedException \Bluz\Db\Exception\InvalidPrimaryKeyException
     */
    public function testGetPrimaryKeyException()
    {
        $table = Db\WrongKeysTable::getInstance();
        $table->getPrimaryKey();
    }

    /**
     * Get Primary Key
     */
    public function testGetPrimaryKey()
    {
        $table = Db\ConcreteTable::getInstance();
        self::assertEquals(['bar', 'baz'], $table->getPrimaryKey());
    }

    /**
     * Get Model name
     */
    public function testGetModel()
    {
        $table = Db\ConcreteTable::getInstance();
        self::assertEquals('Db', $table->getModel());
    }

    /**
     * @dataProvider getFindWrongData
     * @expectedException \Bluz\Db\Exception\InvalidPrimaryKeyException
     *
     * @param $keyValues
     */
    public function testFindException($keyValues)
    {
        $this->table::find(...$keyValues);
    }

    /**
     * Get Meta Information
     */
    public function testGetMetaInformation()
    {
        $meta = TestTable::getMeta();
        self::assertArrayHasSize($meta, 6);
        self::assertArrayHasKey('id', $meta);
        self::assertArrayHasKey('name', $meta);
        self::assertEqualsArray(['DATA_TYPE' => 'int', 'COLUMN_DEFAULT' => '', 'COLUMN_KEY' => 'PRI'], $meta['id']);
    }

    /**
     * Get Meta Information
     */
    public function testGetColumns()
    {
        $columns = TestTable::getColumns();
        self::assertArrayHasSize($columns, 6);
        self::assertEqualsArray(['id', 'name', 'email', 'status', 'created', 'updated'], $columns);
    }

    /**
     * @return array
     */
    public function getFindWrongData()
    {
        return [
            [[1]],
            [[1, 2, 3]]
        ];
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind()
    {
        if (!class_exists('PDO') || !in_array('sqlite', \PDO::getAvailableDrivers(), false)) {
            self::markTestSkipped('This test requires SQLite support in your environment');
        }
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testInsert().
     */
    public function testInsert()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testUpdate().
     */
    public function testUpdate()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        // Remove the following lines when you implement this test.
        self::markTestIncomplete('This test has not been implemented yet.');
    }
}
